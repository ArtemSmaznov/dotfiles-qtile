#+title:       qTile
#+author:      Artem Smaznov
#+description: A window manager written in Python
#+startup:     overview
#+auto_tangle: t

* Table of Contents :toc:
- [[#dependencies][Dependencies]]
- [[#screenshots][Screenshots]]
- [[#imports][Imports]]
- [[#hooks][Hooks]]
- [[#general-settings][General Settings]]
- [[#user-preferences][User Preferences]]
- [[#apps][Apps]]
- [[#windows][Windows]]
- [[#workspaces-groups][Workspaces (Groups)]]
  - [[#internet][Internet]]
  - [[#gaming][Gaming]]
  - [[#coding][Coding]]
  - [[#computer][Computer]]
  - [[#music][Music]]
  - [[#graphics][Graphics]]
  - [[#chat][Chat]]
  - [[#sandbox][Sandbox]]
  - [[#monitor][Monitor]]
- [[#scratchpads][Scratchpads]]
- [[#layouts][Layouts]]
- [[#bar][Bar]]
  - [[#primary][Primary]]
  - [[#secondary][Secondary]]
  - [[#screens][Screens]]
- [[#keybindings][Keybindings]]
  - [[#mod-keys][Mod Keys]]
  - [[#keybindings-1][Keybindings]]
  - [[#mouse-bindings][Mouse Bindings]]
- [[#utils][Utils]]
  - [[#volume][Volume]]
  - [[#widget-container][Widget Container]]
- [[#widgets][Widgets]]
  - [[#initialization][Initialization]]
  - [[#general][General]]
  - [[#sensors][Sensors]]

* Dependencies
|-----------------+-------------------------------------------------|
| Name            | Description                                     |
|-----------------+-------------------------------------------------|
| [[https://archlinux.org/packages/?name=qtile][qTile]]           | Window Manager                                  |
| [[https://archlinux.org/packages/community/any/python-xlib/][python-xlib]]     | Required to get the number of available screens |
| [[https://archlinux.org/packages/community/x86_64/python-psutil/][python-psutil]]   | Required for the Net-Graph widget               |
| [[https://fontawesome.com/][Font Awesome]]    | Font for displaying panel icons                 |
| [[https://www.nerdfonts.com/][NERDFont]]        | Font for displaying panel icons                 |
| [[https://archlinux.org/packages/community/x86_64/powerline-fonts/][Powerline Fonts]] | Font for rendering the power-line               |
|-----------------+-------------------------------------------------|

#+begin_example shell
sudo pacman -S qtile python-xlib python-psutil
#+end_example

* Screenshots
[[https://raw.githubusercontent.com/ArtemSmaznov/screenshots/master/qTile/desktop.png]]

* Imports
#+begin_src python :tangle config.py
import os
import subprocess

from libqtile import hook, layout, bar
from libqtile.config import Key, Match, DropDown, Group, ScratchPad, Screen, Click, Drag, KeyChord
from libqtile.lazy import lazy
from typing import List
from Xlib import display as xdisplay

from widgets import *
from preferences import dmscripts

from themes import float_layout, global_layout
import themes
import utils
import widgets
import apps

# You can import 'colorized' for alternating fonts or 'powerline' for
# powerline-like styling of widgets
from utils.widget_container import colorized as widget_container
#+end_src

* Hooks
Startup
#+begin_src python :tangle config.py
@hook.subscribe.startup_once
def autostart():
    autostart_script = os.path.expanduser("~/.local/bin/auto-start.sh")
    subprocess.call([autostart_script])
#+end_src

* General Settings
#+begin_src python :tangle config.py
auto_fullscreen            = True
bring_front_click          = "floating_only"
cursor_warp                = False
dgroups_app_rules          = []  # type: List
focus_on_window_activation = "smart"
follow_mouse_focus         = False
reconfigure_screens        = True
auto_minimize              = True
#+end_src

* User Preferences
Bar widgets font
Values:
- =powerline=
- =nerd=
- =unicode=
#+begin_src python :tangle preferences.py
powerline_font = "powerline"
#+end_src

System Control
#+begin_src python :tangle preferences.py
volume_step = 3
#+end_src

Regional
#+begin_src python :tangle preferences.py
languages   = ["us", "ru"]
# languages = ['us', 'ru', 'jp']
time_format = "%l:%M %p"
date_format = "%a, %d %b %Y"
#+end_src

Paths
#+begin_src python :tangle preferences.py
dmscripts = "~/.local/bin/dm-scripts/"
#+end_src

* Apps
#+begin_src python :tangle apps.py
from libqtile.utils import guess_terminal
#+end_src

#+begin_src python :tangle apps.py
myTerminal         = guess_terminal()
myTextEditor       = myTerminal + " -e vim"
myHtop             = myTerminal + " -e htop"
myFiles            = myTerminal + " -e vifmrun"
myCliMusic         = myTerminal + " -e ncmpcpp"
myVirtManager      = "virt-manager"
myAnki             = "anki"
myWebBrowser       = "qutebrowser"
myIncognitoBrowser = "qutebrowser --target private-window"
myTorBrowser       = "torbrowser-launcher"
myFileManager      = "pcmanfm"
myVideoPlayer      = "celluloid"
myGame             = "/usr/bin/steam-runtime %U"
myIde              = "emacsclient -c -a 'emacs'"
myImageEditor      = "gimp"
myVectorEditor     = "inkscape"
myVideoEditor      = "kdenlive"
myPhotoLibrary     = "digikam"
myTorrent          = "transmission-gtk"
myVpn              = "/opt/piavpn/bin/pia-client --quiet"
myVm               = "virtualbox"
myLauncher         = "rofi -show drun"
myPasswordManager  = "rofi-pass"
myCalculator       = "gnome-calculator"

myWhatsApp         = "whatsapp-for-linux"
myDiscord          = "discord"

myMyNetworkManager = "nm-connection-editor"
myBluetoothManager = "blueman-manager"
myPowerManager     = "xfce4-power-manager-settings"
myAudioManager     = myTerminal + " -e alsamixer"
#+end_src

* Windows
Run the utility of =xprop= to see the wm class and name of an X client.
#+begin_src python :tangle config.py
floating_layout = layout.Floating(
    float_rules=[
        # default_float_rules include: utility, notification, toolbar, splash, dialog,
        # file_progress, confirm, download and error.
        ,*layout.Floating.default_float_rules,
        #  Defaults
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(title="branchdialog"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        #  Steam
        Match(wm_class="Steam", title="Friends List"),
        Match(wm_class="Steam", title="News"),
        Match(wm_class="Steam", title="Guard"),
        Match(wm_class="Steam", title="Screenshot Uploader"),
        # Match(wm_class='Steam', title='Self Updater'),
        #  Other
        Match(wm_class="Nitrogen"),
    ],
    ,**float_layout
)
#+end_src

* Workspaces (Groups)
Icons come from https://fontawesome.com/

Optional group parameters
#+begin_example python
label="",
layout="columns",
spawn=apps.myWebBrowser,
#+end_example

#+begin_src python :tangle config.py
groups = [
#+end_src

** Internet
#+begin_src python :tangle config.py
    Group(
        "internet",
        label="globe",
        matches=[
            Match(
                wm_class=[
                    "firefox",
                    "Tor Browser",
                    "Chromium",
                    "Google-chrome",
                    "Brave-browser",
                    "vivaldi-stable",
                    "qutebrowser",
                    "nyxt",
                ]
            )
        ],
    ),
#+end_src

** Gaming
#+begin_src python :tangle config.py
    Group(
        "gaming",
        label="gamepad",
        layout="max",
        matches=[
            Match(
                wm_class=[
                    "Wine",
                    "dolphin-emu",
                    "Lutris",
                    "Citra",
                    "SuperTuxKart",
                    "Steam",
                    "battle.net.exe",
                ]
            ),
            Match(
                title=[
                    "Steam",
                    "Battle.net",
                ]
            ),
        ],
    ),
#+end_src

** Coding
#+begin_src python :tangle config.py
    Group(
        "coding",
        label="keyboard",
        # spawn=apps.myTerminal,
        matches=[
            Match(
                wm_class=[
                    # 'Alacritty',
                    # 'Terminator',
                    # 'URxvt',
                    # 'UXTerm',
                    # 'kitty',
                    # 'K3rmit',
                    # 'XTerm',
                    "Geany",
                    "Atom",
                    "Subl3",
                    "code-oss",
                    "Emacs",
                    "Oomox",
                    "Unity",
                    "UnityHub",
                    "jetbrains-studio",
                ]
            ),
        ],
    ),
#+end_src

** Computer
#+begin_src python :tangle config.py
    Group(
        "computer",
        label="folder",
        matches=[
            Match(
                wm_class=[
                    "dolphin",
                    "ark",
                    "Nemo",
                    "pcmanfm",
                    "File-roller",
                    "googledocs",
                    "keep",
                    "calendar",
                ]
            ),
        ],
    ),
#+end_src

** Music
#+begin_src python :tangle config.py
    Group(
        "music",
        label="headphones",
        spawn=apps.myCliMusic,
        matches=[
            Match(
                wm_class=[
                    "Spotify",
                    "youtubemusic-nativefier-040164",
                ]
            ),
        ],
    ),
#+end_src

** Graphics
#+begin_src python :tangle config.py
    Group(
        "graphics",
        label="camera",
        matches=[
            Match(
                wm_class=[
                    "Gimp-2.10",
                    "Gimp",
                    "Inkscape",
                    "Flowblade",
                    "digikam",
                ]
            ),
        ],
    ),
#+end_src

** Chat
#+begin_src python :tangle config.py
    Group(
        "chat",
        label="sms",
        matches=[
            Match(
                wm_class=[
                    "whatsapp-for-linux",
                    "Slack",
                    "discord",
                    "signal",
                ]
            ),
        ],
    ),
#+end_src

** Sandbox
#+begin_src python :tangle config.py
    Group(
        "sandbox",
        label="layer-group",
        matches=[
            Match(
                title=[
                    "Celluloid",
                ],
            ),
            Match(
                wm_class=[
                    "vlc",
                    "obs",
                    "kdenlive",
                ],
            ),
        ],
    ),
#+end_src

** Monitor
#+begin_src python :tangle config.py
    Group(
        "monitor",
        label="chart-bar",
        layout="max",
        matches=[
            Match(
                wm_class=[
                    "virt-manager",
                    "VirtualBox Manager",
                    "VirtualBox Machine",
                    "Cypress",
                ]
            ),
        ],
    )]
#+end_src

* Scratchpads
#+begin_src python :tangle config.py
s_width = 0.8
s_height = 0.8
s_left_margin = (1.0 - s_height) / 2
s_top_margin = (1.0 - s_height) / 2

# Add a ScratchPad Group
groups.append(
    ScratchPad(
        "scratchpad",
        [
            DropDown(
                "terminal",
                apps.myTerminal,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "htop",
                apps.myHtop,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "files",
                apps.myFiles,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "music",
                apps.myCliMusic,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "virtmanager",
                apps.myVirtManager,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "torrent",
                apps.myTorrent,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "calc",
                apps.myCalculator,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "whatsapp",
                apps.myWhatsApp,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "discord",
                apps.myDiscord,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
            DropDown(
                "anki",
                apps.myAnki,
                x=s_left_margin,
                y=s_top_margin,
                width=s_width,
                height=s_height,
                warp_pointer=False,
            ),
        ],
    ),
)
#+end_src

* Layouts
#+begin_src python :tangle config.py
layouts = [ layout.MonadTall(**global_layout)
          , layout.Columns(**global_layout)
          , layout.Tile(**global_layout)
          # , layout.MonadWide(**global_layout)
          # , layout.Stack(num_stacks=2)
          # , layout.Matrix()
          # , layout.RatioTile()
          # , layout.TreeTab()
          # , layout.VerticalTile(**global_layout)
          # , layout.Zoomy()
          , layout.Bsp(**global_layout)
          , layout.Max(**global_layout) ]
#+end_src

* Bar
** Primary
#+begin_src python :tangle config.py
def primary_bar():
    return [ widgets.general.separator(4)
           , widgets.general.start_widget()
           , widgets.general.separator(2)
           , widgets.general.prompt_widget()
           , widgets.general.chord()
           , widgets.general.separator(4)
           , widgets.general.time()
           , widgets.general.layout_icon()
           , widgets.general.group_box()
           , widgets.general.separator(20)
           , widgets.general.task_list()
           , widgets.general.keyboard_layout()
           , widgets.general.sys_tray()
           , widgets.general.separator(5)
           ,,*widget_container(
                widgets=[ widgets.general.updater
                        , widgets.sensor.thermals
                        , widgets.sensor.network_graph
                        , widgets.general.volume
                        , widgets.general.date ])
           , widgets.general.profile()
    ]
#+end_src

** Secondary
#+begin_src python :tangle config.py
def secondary_bar():
    return [ widgets.general.separator()
           , widgets.general.time()
           , widgets.general.layout_icon()
           , widgets.general.group_box()
           , widgets.general.separator(40)
           , widgets.general.task_list()
           ,,*widget_container(
                widgets=[ widgets.sensor.nvidia_sensors
                        , widgets.sensor.cpu_graph
                        , widgets.sensor.memory_graph
                        , widgets.sensor.network_graph
                        , widgets.general.volume
                        , widgets.general.date ])
    ]
#+end_src

** Screens
#+begin_src python :tangle config.py
def init_bar(s="secondary"):
    if s == "primary": my_bar = primary_bar()
    elif s == "secondary": my_bar = secondary_bar()
    else: my_bar = secondary_bar()

    return bar.Bar( my_bar
                  , themes.bar_size
                  , background=themes.background
                  , opacity=themes.bar_opacity
    )
#+end_src

#+begin_src python :tangle config.py
def get_num_monitors():
    num_monitors = 0
    try:
        display = xdisplay.Display()
        screen = display.screen()
        resources = screen.root.xrandr_get_screen_resources()

        for output in resources.outputs:
            monitor = display.xrandr_get_output_info(output, resources.config_timestamp)
            preferred = False
            if hasattr(monitor, "preferred"):
                preferred = monitor.preferred
            elif hasattr(monitor, "num_preferred"):
                preferred = monitor.num_preferred
            if preferred:
                num_monitors += 1
    except Exception as e:
        # always setup at least one monitor
        return 1
    else:
        return num_monitors


num_monitors = get_num_monitors()

screens = [
    Screen(
        top=init_bar("primary"),
    )
]

if num_monitors > 1:
    for m in range(num_monitors - 1):
        screens.append(
            Screen(
                top=init_bar("secondary"),
            )
        )
#+end_src

* Keybindings
** Mod Keys
#+begin_src python :tangle config.py
mod   = "mod4"
shift = "shift"
ctrl  = "control"
alt   = "mod1"
#+end_src

** Keybindings
#+begin_src python :tangle config.py
keys = []
dm = os.path.expanduser(dmscripts)
#+end_src
*** System
Debugging
#+begin_src python :tangle config.py
keys.append(
    Key( [ mod, ctrl ] , "d" , lazy.hide_show_bar("all") , desc="Debugging" )
)
#+end_src

#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod, ctrl ] , "r" , lazy.restart()  , desc="Restart qTile" ),
    Key( [ mod, ctrl ] , "q" , lazy.shutdown() , desc="Quit qTile"    ),

    # Swith Keyboard Layouts
    Key( [ shift ] , "Alt_L" , lazy.spawn(dm + "dm-lang") , desc="Language Switching" ),

    # Changing UI
    KeyChord( [ mod ] , "t" , [
        Key([] , "z" , lazy.hide_show_bar("all")         , desc="Toggle Zen Mobde"   ),
        Key([] , "s" , lazy.hide_show_bar("all")         , desc="Toggle Statusbar"   ),
        Key([] , "k" , lazy.spawn(dm + "dm-keys toggle") , desc="Toggle Key Grabber" ),
    ], mode="Toggle"),
])
#+end_src

*** Windows
States
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod        ] , "q"   , lazy.window.kill()              , desc="Close focused Window" ),
    Key( [ mod        ] , "F11" , lazy.window.toggle_fullscreen() , desc="Toggle Fullscreen"    ),
    Key( [ mod, shift ] , "f"   , lazy.window.toggle_fullscreen() , desc="Toggle Fullscreen"    ),
    Key( [ mod        ] , "m"   , lazy.window.toggle_maximize()   , desc="Toggle Maximize"      ),
    Key( [ mod        ] , "f"   , lazy.window.toggle_floating()   , desc="Toggle Floating"      ),

    Key( [ mod, alt ] , "m" ,
        lazy.window.toggle_minimize(),
        lazy.layout.down(),
        desc="Toggle Minimize"),
])
#+end_src

Focus
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod        ] , "slash" , lazy.PLACEHOLDER         , desc="Switch navigation layer (Tiled vs Floating screens)" ),
    Key( [ alt        ] , "Tab"   , lazy.group.next_window() , desc="Move focus to next Window"                           ),
    Key( [ alt, shift ] , "Tab"   , lazy.group.prev_window() , desc="Move focus to prev Window"                           ),
    Key( [ mod        ] , "h"     , lazy.layout.left()       , desc="Move focus to left Window"                           ),
    Key( [ mod        ] , "l"     , lazy.layout.right()      , desc="Move focus to right Window"                          ),
    Key( [ mod        ] , "j"     , lazy.layout.down()       , desc="Move focus to below Window"                          ),
    Key( [ mod        ] , "k"     , lazy.layout.up()         , desc="Move focus to above Window"                          ),
])
#+end_src

Swapping
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod, shift ] , "h" , lazy.layout.shuffle_left()  , desc="Swap focused Window with the one to the left"  ),
    Key( [ mod, shift ] , "l" , lazy.layout.shuffle_right() , desc="Swap focused Window with the one to the right" ),
    Key( [ mod, shift ] , "j" , lazy.layout.shuffle_down()  , desc="Swap focused Window with the one below"        ),
    Key( [ mod, shift ] , "k" , lazy.layout.shuffle_up()    , desc="Swap focused Window with the one above"        ),
])
#+end_src

Resizing
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod, ctrl ] , "h" , lazy.layout.grow_left()  , desc="Grow focused Window left"  ),
    Key( [ mod, ctrl ] , "l" , lazy.layout.grow_right() , desc="Grow focused Window right" ),
    Key( [ mod, ctrl ] , "j" , lazy.layout.grow_down()  , desc="Grow focused Window down"  ),
    Key( [ mod, ctrl ] , "k" , lazy.layout.grow_up()    , desc="Grow focused Window up"    ),
])
#+end_src

Move Floating Windows
#+begin_src python :tangle config.py
#+end_src

Masters
#+begin_src python :tangle config.py
#+end_src

*** TODO Monitors
Focus
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod ] , "comma"  , lazy.prev_screen() , desc="Move focus to prev Screen" ),
    Key( [ mod ] , "period" , lazy.next_screen() , desc="Move focus to next Screen" ),
    Key( [ mod ] , "F1"     , lazy.to_screen(0)  , desc="Move focus to 1st Screen"  ),
    Key( [ mod ] , "F2"     , lazy.to_screen(1)  , desc="Move focus to 2nd Screen"  ),
])
#+end_src

Moving Windows
#+begin_src python :tangle config.py
#+end_src

Swapping
#+begin_src python :tangle config.py
#+end_src

*** Layouts
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod ]        , "space" , lazy.next_layout()      , desc="Switch Laouts"            ),
    Key( [ mod, shift ] , "space" , lazy.prev_layout()      , desc="Switch Laouts"            ),
    Key( [ mod, alt ]   , "space" , lazy.to_layout_index(0) , desc="Switch to default Layout" ),
    Key( [ mod ]        , "equal" , lazy.layout.normalize() , desc="Reset all window sizes"   ),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key( [ mod, shift ] , "Return" , lazy.layout.toggle_split() , desc="Toggle between split and unsplit sides of stack" ),
])
#+end_src

#+begin_src python :tangle config.py
# Only map up to 10 Layouts to number keys
def getNumberOfKeysForLayouts():
    if len(layouts) > 10:
        return 10
    else:
        return len(layouts)

# Switch to another Layout with SUPER + ALT + #
for i in range(getNumberOfKeysForLayouts()):
    key = str(i + 1)
    if i + 1 == 10:
        key = "0"

    keys.append(Key([mod, alt], key, lazy.to_layout_index(i)))

# Switch to last Layout
keys.append(Key([mod, alt], "quoteleft", lazy.to_layout_index(len(layouts) - 1)))
#+end_src

*** Workspaces (Groups)
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod ] , "Tab" , lazy.screen.toggle_group()      , desc="Toggle Workspace" ),
    Key( [ mod ] , "F12" , lazy.group["coding"].toscreen(1), desc="meh"              ),

    KeyChord( [ mod ] , "g" , [
        Key( [] , "h" , lazy.screen.prev_group()                  , desc="Move to the group on the left"               ),
        Key( [] , "l" , lazy.screen.next_group()                  , desc="Move to the group on the right"              ),
        Key( [] , "d" , lazy.function(utils.clear_default_groups) , desc="Delete system 1-9 groups after a bad config" ),
    ], mode="Groups"),
])
#+end_src

#+begin_src python :tangle config.py
# Only map up to 10 Groups to number keys
def getNumberOfKeysForGroups():
    if len(groups) > 10:
        return 10
    else:
        return len(groups)


# Switch to another Group with SUPER + #
# Send current window to another Group SUPER + SHIFT + #
for i in range(getNumberOfKeysForGroups()):
    name = groups[i].name

    key = str(i + 1)
    if i + 1 == 10:
        key = "0"

    keys.extend([
        Key( [ mod ]        , key , lazy.group[name].toscreen() ),
        Key( [ mod, shift ] , key , lazy.window.togroup(name)   )
    ])
#+end_src

*** TODO Scratchpads
#+begin_src python :tangle config.py
keys.extend([
    Key( [ mod ] , "quoteleft" , lazy.group["scratchpad"].dropdown_toggle("terminal") , desc="Terminal Scratchpad" ),
    Key( [ mod ] , "e"         , lazy.group["scratchpad"].dropdown_toggle("files")    , desc="File Manager Scratchpad" ),
    # , ("C-M1-<Delete>" , namedScratchpadAction myScratchPads "htop"        ) -- Htop Scratchpad

    KeyChord( [ mod ] , "s" , [
        Key( [] , "h" , lazy.group["scratchpad"].dropdown_toggle("htop"       ) , desc="Htop Scratchpad"        ) ,
        Key( [] , "m" , lazy.group["scratchpad"].dropdown_toggle("music"      ) , desc="Music Scratchpad"       ) ,
        Key( [] , "c" , lazy.group["scratchpad"].dropdown_toggle("calc"       ) , desc="Calculator Scratchpad"  ) ,
        Key( [] , "w" , lazy.group["scratchpad"].dropdown_toggle("whatsapp"   ) , desc="WhatsApp Scratchpad"    ) ,
        Key( [] , "d" , lazy.group["scratchpad"].dropdown_toggle("discord"    ) , desc="Discord Scratchpad"     ) ,
        Key( [] , "v" , lazy.group["scratchpad"].dropdown_toggle("virtmanager") , desc="VirtManager Scratchpad" ) ,
        Key( [] , "t" , lazy.group["scratchpad"].dropdown_toggle("torrent"    ) , desc="Torrent Scratchpad"     ) ,
        Key( [] , "a" , lazy.group["scratchpad"].dropdown_toggle("anki"       ) , desc="Anki Scratchpad"        ) ,
    ], mode="Scratchpads"),
])
#+end_src

*** Media Keys
#+begin_src python :tangle config.py
keys.extend([
    Key( [      ] , "XF86AudioRaiseVolume" , lazy.spawn("amixer set Master 2%+ unmute") , desc="Increase System Volume" ),
    Key( [      ] , "XF86AudioLowerVolume" , lazy.spawn("amixer set Master 2%- unmute") , desc="Decrease System Volume" ),
    Key( [      ] , "XF86AudioMute"        , lazy.spawn("amixer set Master toggle"    ) , desc="Mute"                   ),
    Key( [ ctrl ] , "XF86AudioRaiseVolume" , lazy.spawn("mpc volume +2"               ) , desc="Increase Player Volume" ),
    Key( [ ctrl ] , "XF86AudioLowerVolume" , lazy.spawn("mpc volume -2"               ) , desc="Decrease Player Volume" ),
    Key( [      ] , "XF86AudioPrev"        , lazy.spawn("mpc prev"                    ) , desc="Prev Song"              ),
    Key( [      ] , "XF86AudioNext"        , lazy.spawn("mpc next"                    ) , desc="Next Song"              ),
    Key( [      ] , "XF86AudioPlay"        , lazy.spawn("mpc toggle"                  ) , desc="Play/Pause Music"       ),
    Key( [      ] , "XF86AudioStop"        , lazy.spawn("mpc stop"                    ) , desc="Stop Music"             ),
])
#+end_src

*** dm-scripts
#+begin_src python :tangle config.py
keys.extend([
    KeyChord( [ mod ] , "d" , [
        Key( [ mod ] , "d"         , lazy.spawn(dm + "dm-master"    ) , desc="DM Master"     ),
        Key( [     ] , "w"         , lazy.spawn(dm + "dm-wallpaper" ) , desc="DM Wallpaper"  ),
        Key( [     ] , "r"         , lazy.spawn(dm + "dm-record"    ) , desc="DM Record"     ),
        Key( [     ] , "p"         , lazy.spawn(dm + "dm-power"     ) , desc="DM Power"      ),
        Key( [     ] , "t"         , lazy.spawn(dm + "dm-theme"     ) , desc="DM Theme"      ),
        Key( [     ] , "s"         , lazy.spawn(dm + "dm-screenshot") , desc="DM Screenshot" ),
        Key( [     ] , "b"         , lazy.spawn(dm + "dm-bookman"   ) , desc="DM Bookman"    ),
        Key( [     ] , "n"         , lazy.spawn(dm + "dm-notify"    ) , desc="DM Notify"     ),
        Key( [     ] , "backslash" , lazy.spawn(dm + "dm-notify"    ) , desc="DM Notify"     ),
        Key( [     ] , "k"         , lazy.spawn(dm + "dm-keys"      ) , desc="DM Keys"       ),
    ], mode="dm-scripts"),
])
#+end_src

*** Power Control
#+begin_src python :tangle config.py
keys.extend([
    Key( [ alt ] , "F4" , lazy.spawn(dm + "dm-power") , desc="Logout Menu"),

    KeyChord( [ mod ] , "z" , [
        Key( [] , "z" , lazy.spawn(dm + "dm-power"         ) , desc="dm-power"          ),
        Key( [] , "l" , lazy.spawn(dm + "dm-power lock"    ) , desc="Lock Screen"       ),
        Key( [] , "s" , lazy.spawn(dm + "dm-power suspend" ) , desc="Suspend System"    ),
        Key( [] , "p" , lazy.spawn(dm + "dm-power poweroff") , desc="Shutdown System"   ),
        Key( [] , "r" , lazy.spawn(dm + "dm-power reboot"  ) , desc="Reboot System"     ),
        Key( [] , "w" , lazy.spawn(dm + "dm-power windows" ) , desc="Reboot to Windows" ),
    ], mode="(l)ock, (s)uspend, (p)oweroff, (r)eboot, (w)indows"),
])
#+end_src

*** Screenshot
#+begin_src python :tangle config.py
keys.extend([
    Key( [            ] , "Print" , lazy.spawn(dm + "dm-screenshot screen") , desc="Fullscreen Screenshot"     ),
    Key( [ mod, shift ] , "Print" , lazy.spawn(dm + "dm-screenshot area"  ) , desc="Selection Area Screenshot" ),
    Key( [ alt        ] , "Print" , lazy.spawn(dm + "dm-screenshot window") , desc="Active Window Screenshot"  ),
    Key( [ mod        ] , "Print" , lazy.spawn(dm + "dm-screenshot full"  ) , desc="Full Desktop Screenshot"   ),
])
#+end_src

*** Notifications
#+begin_src python :tangle config.py
keys.extend([
    KeyChord( [ mod ] , "backslash" , [
        Key( [       ] , "backslash" , lazy.spawn(dm + "dm-notify recent" ) , desc="Show most recent Notifications" ),
        Key( [ mod   ] , "backslash" , lazy.spawn(dm + "dm-notify recent" ) , desc="Show most recent Notifications" ),
        Key( [ shift ] , "backslash" , lazy.spawn(dm + "dm-notify recents") , desc="Show few recent Notifications"  ),
        Key( [       ] , "r"         , lazy.spawn(dm + "dm-notify recents") , desc="Show few recent Notifications"  ),
        Key( [ shift ] , "c"         , lazy.spawn(dm + "dm-notify clear"  ) , desc="Clear all Notifications"        ),
        Key( [       ] , "c"         , lazy.spawn(dm + "dm-notify close"  ) , desc="Clear last Notification"        ),
        Key( [       ] , "a"         , lazy.spawn(dm + "dm-notify context") , desc="Open last Notification"         ),
    ], mode="Notifications"),
])
#+end_src

*** Launching Apps
#+begin_src python :tangle config.py
keys.extend([
    Key( [ ctrl, alt  ] , "t"      , lazy.spawn(apps.myTerminal        ) , desc="Launch Terminal"                      ),
    Key( [ mod        ] , "Return" , lazy.spawn(apps.myTerminal        ) , desc="Launch Terminal"                      ),
    Key( [ mod        ] , "c"      , lazy.spawn(apps.myIde             ) , desc="Launch IDE"                           ),
    Key( [ mod        ] , "b"      , lazy.spawn(apps.myWebBrowser      ) , desc="Launch Web Browser"                   ),
    Key( [ mod        ] , "i"      , lazy.spawn(apps.myIncognitoBrowser) , desc="Launch Web Browser in Incognito Mode" ),
    Key( [ mod        ] , "p"      , lazy.spawn(apps.myPasswordManager ) , desc="Autofill Passwords"                   ),
    Key( [ mod        ] , "r"      , lazy.spawn(apps.myLauncher        ) , desc="Launch Launcher"                      ),
    Key( [ mod, shift ] , "r"      , lazy.spawn("dmenu_run"            ) , desc="Launch dmenu"                         ),

    # Primary
    KeyChord( [ mod ] , "o" , [
        Key( [] , "t" , lazy.spawn(apps.myTorBrowser ) , desc="Launch Tor Browser"  ),
        Key( [] , "s" , lazy.spawn(apps.myGame       ) , desc="Launch Steam"        ),
    ], mode="Open Primary"),

    # Secondary
    KeyChord( [ ctrl, alt ] , "o" , [
        Key( [] , "t" , lazy.spawn(apps.myTextEditor  ) , desc="Launch Text Editor"   ),
        Key( [] , "p" , lazy.spawn(apps.myPhotoLibrary) , desc="Launch Photo Library" ),
        Key( [] , "g" , lazy.spawn(apps.myImageEditor ) , desc="Launch Image Editor"  ),
        Key( [] , "r" , lazy.spawn(apps.myVectorEditor) , desc="Launch Vector Editor" ),
        Key( [] , "v" , lazy.spawn(apps.myVideoEditor ) , desc="Launch Video Editor"  ),
    ], mode="Open Secondary"),
])
#+end_src

** Mouse Bindings
#+begin_src python :tangle config.py
# Drag floating layouts.
mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]
#+end_src

* Utils
#+begin_src python :tangle utils/__init__.py
import preferences as user
#+end_src

#+begin_src python :tangle utils/__init__.py
def clear_default_groups(qtile):
    for i in range(10):
        qtile.cmd_delgroup(str(i + 1))
#+end_src

** Volume
Increase Volume
#+begin_src python :tangle utils/__init__.py
def volume_increase(qtile):
    qtile.cmd_spawn("amixer -q sset Master on " + str(user.volume_step) + "%+")
#+end_src

Decrease Volume
#+begin_src python :tangle utils/__init__.py
def volume_decrease(qtile):
    qtile.cmd_spawn("amixer -q sset Master on " + str(user.volume_step) + "%-")
#+end_src

Mute
#+begin_src python :tangle utils/__init__.py
def volume_mute(qtile):
    qtile.cmd_spawn("amixer -q sset Master toggle")
#+end_src

** Widget Container
#+begin_src python :tangle utils/widget_container.py
from libqtile import widget

import preferences as user
import themes
#+end_src

*** Powerline
#+begin_src python :tangle utils/widget_container.py
def powerline(
    widgets=[], colors=themes.power_line_colors, separator_font=user.powerline_font
):
    separator = {
        "powerline": "",
        "nerd": "",
        "unicode": "◀",
    }
    separator_size = {
        "powerline": 23,
        "nerd": 64,
        "unicode": 28,
    }
    separator_padding = {
        "powerline": 0,
        "nerd": -14,
        "unicode": -4,
    }
    w_container = []
    is_first_color_iteration = True

    for iw in range(len(widgets)):
        # Generate a looping color index
        ic = iw
        while ic >= len(colors):
            ic = ic - len(colors)
            is_first_color_iteration = False

        # Set the background color for the current segment
        current_color = colors[ic]

        # Set the background color for the preceding segment
        if ic != 0:
            previous_color = colors[ic - 1]
        else:
            if is_first_color_iteration:
                previous_color = themes.background
            else:
                previous_color = colors[len(colors) - 1]

        # Create a segment
        w_container.extend(
            [
                widget.TextBox(
                    text=separator[separator_font],
                    foreground=current_color,
                    background=previous_color,
                    fontsize=separator_size[separator_font],
                    padding=separator_padding[separator_font],
                ),
                *widgets[iw](current_color, themes.fg_dark),
                widget.Sep(linewidth=0, padding=4, background=current_color),
            ]
        )

    return w_container
#+end_src

*** Colorized
#+begin_src python :tangle utils/widget_container.py
def colorized(widgets=[], colors=themes.power_line_colors, separator_gap=8):
    w_container = []
    is_first_color_iteration = True

    for iw in range(len(widgets)):
        # Generate a looping color index
        ic = iw
        while ic >= len(colors):
            ic = ic - len(colors)
            is_first_color_iteration = False

        # Set the background color for the current segment
        current_color = colors[ic]

        # Set the background color for the preceding segment
        if ic != 0:
            previous_color = colors[ic - 1]
        else:
            if is_first_color_iteration:
                previous_color = themes.background
            else:
                previous_color = colors[len(colors) - 1]

        # Create a segment
        w_container.extend(
            [
                widget.Sep(
                    linewidth=0, padding=separator_gap, background=themes.background
                ),
                *widgets[iw](themes.background, current_color),
            ]
        )

    # Create an extra gap after the widget
    w_container.extend(
        [
            widget.Sep(linewidth=0, padding=4, background=themes.background),
        ]
    )

    return w_container
#+end_src

* Widgets
** Initialization
#+begin_src python :tangle widgets/__init__.py
import widgets.general as general
import widgets.sensors as sensor
import themes

# Default widget settings
widget_defaults = dict( font=themes.font_regular
                      , fontsize=11
                      , padding=3
                      , foreground=themes.foreground
)

extension_defaults = widget_defaults.copy()
#+end_src

** General
#+begin_src python :tangle widgets/general.py
import os
import socket

import apps
import preferences as user
import themes
from libqtile import lazy, qtile, widget
from preferences import dmscripts

dm = os.path.expanduser(dmscripts)
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+end_src

*** Separator
#+begin_src python :tangle widgets/general.py
def separator(size=6, backround=themes.background):
    return widget.Sep(linewidth=0, padding=size, background=backround)
#+end_src

*** Start
#+begin_src python :tangle widgets/general.py
def start_widget():
    return widget.Image(
        filename=themes.distributor_logo,
        mouse_callbacks={
            "Button1": lambda: qtile.cmd_spawn(apps.myLauncher),
        },
    )
#+end_src

*** User Profile
#+begin_src python :tangle widgets/general.py
def profile():
    return widget.Image(
        filename=themes.user_icon,
        mouse_callbacks={
            "Button1": lambda: qtile.cmd_spawn(dm + "dm-power"),
        },
    )
#+end_src

*** Run Prompt
#+begin_src python :tangle widgets/general.py
def prompt_widget(bg=themes.prompt, fg=themes.fg_dark):
    return widget.Prompt(
        prompt=prompt,
        font=themes.font_bold,
        padding=10,
        foreground=fg,
        background=bg,
    )
#+end_src

*** Time
#+begin_src python :tangle widgets/general.py
def time(bg=themes.background, fg=themes.foreground):
    return widget.Clock(
        font=themes.font_bold, foregroung=fg, background=bg, format=user.time_format
    )
#+end_src

*** Date
#+begin_src python :tangle widgets/general.py
def date(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.Clock(
            font=themes.font_bold, foreground=fg, background=bg, format=user.date_format
        ),
    ]
#+end_src

*** Layouts
#+begin_src python :tangle widgets/general.py
def layout_icon(bg=themes.background, fg=themes.foreground):
    return widget.CurrentLayoutIcon(
        # custom_icon_paths=[os.path.expanduser("~/.config/qtile/icons")],
        foreground=fg,
        background=bg,
        scale=0.6,
        mouse_callbacks={
            "Button1": lambda: qtile.cmd_next_layout(),
            "Button2": lambda: qtile.cmd_to_layout_index(0),
            "Button3": lambda: qtile.cmd_prev_layout(),
            "Button4": lambda: qtile.cmd_next_layout(),
            "Button5": lambda: qtile.cmd_prev_layout(),
        },
    )
#+end_src

*** Workspaces
#+begin_src python :tangle widgets/general.py
def group_box():
    return widget.GroupBox(
        font=themes.font_awesome,
        fontsize=themes.group_icon_size,
        margin_y=3,
        margin_x=0,
        padding_y=5,
        padding_x=3,
        borderwidth=3,
        highlight_method=themes.group_highlight_method,
        disable_drag=True,
        hide_unused=False,
        # Icon colors
        active=themes.foreground,
        inactive=themes.inactive,
        # Background colors
        highlight_color=themes.selection_bg,
        # Border colors
        this_current_screen_border=themes.selection_accent,
        this_screen_border=themes.unfocused_selection_accent,
        other_current_screen_border=themes.other_selection_accent,
        other_screen_border=themes.unfocused_other_selection_accent,
        # Border colors - alert
        urgent_border=themes.alert,
    )
#+end_src

*** Window Name
#+begin_src python :tangle widgets/general.py
def window_name(bg=themes.background, fg=themes.foreground):
    return widget.WindowName(
        font=themes.font_bold, foreground=fg, background=bg, padding=0
    )
#+end_src

*** Windows
#+begin_src python :tangle widgets/general.py
def task_list(bg=themes.background, fg=themes.foreground):
    return widget.TaskList(
        font=themes.font_bold,
        highlight_method=themes.tasklist_highlight_method,
        border=themes.selection_bg,
        foreground=fg,
        background=bg,
        rounded=themes.rounded_hightlights,
        txt_floating=" ",
        txt_maximized=" ",
        txt_minimized=" ",
        icon_size=themes.tasklist_icon_size,
        max_title_width=150,
        padding_x=5,
        padding_y=5,
        margin=0,
    )
#+end_src

*** Notifications
Do not use if notifications are managed by another notification server such as
Dunst
#+begin_src python :tangle widgets/general.py
def notify():
    return widget.Notify(
        foreground=themes.selection_accent,
        foreground_urgent=themes.alert,
        foreground_low=themes.foreground,
    )
#+end_src

*** Keyboard Layout
#+begin_src python :tangle widgets/general.py
def keyboard_layout(bg=themes.background, fg=themes.foreground):
    return widget.KeyboardLayout(
        foreground=fg,
        background=bg,
        configured_keyboards=user.languages,
        font=themes.font_bold,
        mouse_callbacks={
            # This doesn't work
            # "Button1": lambda: lazy.widget["keyboardlayout"].next_keyboard(),
            "Button1": lambda: qtile.cmd_spawn("setxkbmap us"),
            "Button3": lambda: qtile.cmd_spawn("setxkbmap ru"),
        },
    )
#+end_src

*** System Tray
#+begin_src python :tangle widgets/general.py
def sys_tray(bg=themes.background, fg=themes.foreground):
    return widget.Systray(
        foreground=fg,
        background=bg,
    )
#+end_src

*** Updates
#+begin_src python :tangle widgets/general.py
def updater(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size - 3,
            padding_x=2,
            foreground=fg,
            background=bg,
            mouse_callbacks={
                "Button1": lambda: qtile.cmd_spawn(
                    apps.myTerminal + " -e sudo pacman -Syu"
                ),
            },
        ),
        widget.CheckUpdates(
            distro="Arch_checkupdates",
            display_format="{updates}",
            no_update_string="n/a",
            update_interval="1800",
            font=themes.font_bold,
            colour_have_updates=fg,
            colour_no_updates=fg,
            background=bg,
        ),
        widget.CheckUpdates(
            distro="Arch",
            custom_command="pacman -Qu | grep -e nvidia -e linux",
            update_interval="1800",
            display_format="",
            font=themes.font_awesome,
            fontsize=themes.icon_size - 3,
            colour_have_updates=themes.alert,
            # colour_no_updates=themes.foreground,
            background=bg,
        ),
        widget.CheckUpdates(
            distro="Arch",
            custom_command="pacman -Qu | grep -e nvidia -e linux",
            update_interval="1800",
            display_format="{updates}",
            font=themes.font_bold,
            colour_have_updates=themes.alert,
            colour_no_updates=fg,
            background=bg,
        ),
    ]
#+end_src

*** Volume
#+begin_src python :tangle widgets/general.py
def volume(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.Volume(
            font=themes.font_bold,
            foreground=fg,
            background=bg,
            step=user.volume_step,
            mouse_callbacks={
                "Button3": lambda: qtile.cmd_spawn(apps.myAudioManager),
            },
        ),
    ]
#+end_src

*** Chords
#+begin_src python :tangle widgets/general.py
def chord(bg=themes.chord, fg=themes.fg_dark):
    return widget.Chord(
        font=themes.font_bold,
        padding=10,
        foreground=fg,
        background=bg,
    )
#+end_src

** Sensors
#+begin_src python :tangle widgets/sensors.py
import themes
from libqtile import widget
#+end_src

*** Graphs
**** Network
#+begin_src python :tangle widgets/sensors.py
def network_graph(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.NetGraph(
            interface="eno1",
            border_width=0,
            samples=95,
            line_width=2,
            graph_color=fg,
            fill_color="{}.5".format(fg),
            background=bg,
        ),
    ]
#+end_src

**** CPU
#+begin_src python :tangle widgets/sensors.py
def cpu_graph(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.ThermalSensor(
            font=themes.font_bold,
            foreground_alert=themes.alert,
            foreground=fg,
            background=bg,
            threshold=80,
        ),
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.CPUGraph(
            border_width=0,
            samples=95,
            line_width=2,
            graph_color=fg,
            fill_color="{}.5".format(fg),
            background=bg,
        ),
    ]
#+end_src

**** RAM
#+begin_src python :tangle widgets/sensors.py
def memory_graph(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.MemoryGraph(
            border_width=0,
            samples=95,
            line_width=2,
            graph_color=fg,
            fill_color="{}.5".format(fg),
            background=bg,
        ),
    ]
#+end_src

*** Metric
**** Thermal
#+begin_src python :tangle widgets/sensors.py
def thermals(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.ThermalSensor(
            font=themes.font_bold,
            foreground_alert=themes.alert,
            foreground=fg,
            background=bg,
            threshold=80,
        ),
    ]
#+end_src

**** Network
#+begin_src python :tangle widgets/sensors.py
def network(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.Net(
            font=themes.font_bold,
            interface="eno1",
            format="{down} | {up}",
            foreground=fg,
            background=bg,
            padding=5,
        ),
    ]
#+end_src

**** RAM
#+begin_src python :tangle widgets/sensors.py
def memory(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.Memory(
            font=themes.font_bold,
            foreground=fg,
            background=bg,
            measure_mem="G",
        ),
    ]
#+end_src

**** Nvidia
#+begin_src python :tangle widgets/sensors.py
def nvidia_sensors(bg=themes.background, fg=themes.foreground):
    return [
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
        widget.NvidiaSensors(
            font=themes.font_bold,
            foreground_alert=themes.alert,
            foreground=fg,
            background=bg,
        ),
        widget.TextBox(
            text="",
            font=themes.font_awesome,
            fontsize=themes.icon_size,
            padding_x=2,
            foreground=fg,
            background=bg,
        ),
    ]
#+end_src
